/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package QuanLyKho.zis246;



import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 * @author MSI
 */
public class QuanLyKho extends JFrame {

    public Container dialogResult;
    public JButton saveButton;
    private JProgressBar statement;
    private Connection conn;
    private JFrame testFrame;

    /**
     * Creates new form QuanLiKhoForm
     */
    public QuanLyKho() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new JInternalFrame();
        list1 = new List();
        jCheckBoxMenuItem1 = new JCheckBoxMenuItem();
        jLabel1 = new JLabel();
        jSeparator1 = new JSeparator();
        jSeparator2 = new JSeparator();
        jLabel3 = new JLabel();
        jLabel2 = new JLabel();
        jLabel4 = new JLabel();
        jLabel5 = new JLabel();
        tenSP = new JTextField();
        giaSP = new JTextField();
        moTaSanPham = new JTextField();
        buttonThem = new JButton();
        buttonXoa = new JButton();
        buttonSua = new JButton();
        buttonTimKiem = new JButton();
        jSeparator3 = new JSeparator();
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        danhMucSP = new JComboBox<>();

        jInternalFrame1.setVisible(true);

        GroupLayout jInternalFrame1Layout = new GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
                jInternalFrame1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
                jInternalFrame1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        jLabel1.setText("Nhập Thông Tin Sản Phẩm");

        jLabel3.setText("Tên SP :");

        jLabel2.setText("Danh Mục SP :");

        jLabel4.setText("  Giá SP : ");

        jLabel5.setText("Mô Tả SP :");

        tenSP.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                tenSPActionPerformed(evt);
            }
        });


        buttonThem.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        buttonThem.setText("Thêm");
        buttonThem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                buttonThemActionPerformed(evt);
            }
        });

        buttonXoa.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        buttonXoa.setText("Xóa");
        buttonXoa.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                buttonXoaActionPerformed(evt);
            }
        });

        buttonSua.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        buttonSua.setText("Sửa");
        buttonSua.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                buttonSuaActionPerformed(evt, jTable1, testFrame);
            }
        });

        buttonTimKiem.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        buttonTimKiem.setText("Tìm kiếm");
        buttonTimKiem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                buttonTimKiemActionPerformed(evt);
            }
        });

        jTable1.setModel(new DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "STT", "TÊN", "DANH MỤC", "GIÁ", "MÔ TẢ"
                }
        ) {
            Class[] types = new Class[]{
                    String.class, String.class, String.class, String.class, String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        danhMucSP.setModel(new DefaultComboBoxModel<>(new String[]{"Sản phẩm loại 1", "Sản phẩm loại 2"}));

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(45, 45, 45)
                                                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                                        .addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                                                                                        .addGroup(layout.createSequentialGroup()
                                                                                                .addGap(34, 34, 34)
                                                                                                .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE))
                                                                                        .addGroup(layout.createSequentialGroup()
                                                                                                .addGap(27, 27, 27)
                                                                                                .addComponent(jLabel4))))
                                                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                                .addContainerGap()
                                                                                .addComponent(jLabel5, GroupLayout.PREFERRED_SIZE, 73, GroupLayout.PREFERRED_SIZE)))
                                                                .addGap(48, 48, 48)
                                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                                        .addComponent(moTaSanPham, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                                                                        .addComponent(giaSP, GroupLayout.Alignment.LEADING)
                                                                        .addComponent(tenSP)
                                                                        .addComponent(danhMucSP, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(116, 116, 116)
                                                                .addComponent(buttonThem, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(31, 31, 31)
                                                                .addComponent(buttonXoa, GroupLayout.PREFERRED_SIZE, 83, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(29, 29, 29)
                                                                .addComponent(buttonSua, GroupLayout.PREFERRED_SIZE, 87, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(27, 27, 27)
                                                                .addComponent(buttonTimKiem))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(31, 31, 31)
                                                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 586, GroupLayout.PREFERRED_SIZE)))
                                                .addGap(0, 33, Short.MAX_VALUE))
                                        .addComponent(jSeparator3)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 230, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 217, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jSeparator2)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1)
                                        .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, 11, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tenSP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(danhMucSP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(giaSP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(moTaSanPham, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(buttonTimKiem)
                                        .addComponent(buttonSua)
                                        .addComponent(buttonXoa)
                                        .addComponent(buttonThem))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator3, GroupLayout.PREFERRED_SIZE, 12, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 335, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(87, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tenSPActionPerformed(ActionEvent evt) {//GEN-FIRST:event_tenSPActionPerformed

    }

    private int stt = 1; // Biến đếm STT

    public void buttonThemActionPerformed(ActionEvent evt) {
        // Lấy thông tin từ các trường nhập liệu
        String tenSanPham = tenSP.getText();
        String danhMuc = danhMucSP.getSelectedItem().toString();
        String gia = giaSP.getText();
        String moTa = moTaSanPham.getText();
        try {
            if (tenSanPham.isEmpty() || gia.isEmpty()) {
                // Hiển thị thông báo khi tên sản phẩm hoặc giá trị giá rỗng
                JOptionPane.showMessageDialog(this, "Vui lòng nhập dữ liệu", "Lỗi", JOptionPane.ERROR_MESSAGE);

            } else {
                double giaSo = Double.parseDouble(gia);
                // Thêm dữ liệu vào bảng với STT
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.addRow(new Object[]{stt++, tenSanPham, danhMuc, gia, moTa});
                tenSP.setText("");
                giaSP.setText("");
                moTaSanPham.setText("");
            }
        } catch (NumberFormatException e) {
            // Hiển thị thông báo khi giá không phải là số hợp lệ
            JOptionPane.showMessageDialog(this, "Dữ liệu giá không hợp lệ", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }



    public void buttonSuaActionPerformed(ActionEvent evt, JTable jTable1, JFrame parentFrame) {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(parentFrame, "Vui lòng chọn một hàng để sửa đổi.", "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Lấy thông tin của hàng đã chọn trong bảng
        String tenSP = jTable1.getValueAt(selectedRow, 1).toString();
        String danhMuc = jTable1.getValueAt(selectedRow, 2).toString();
        String gia = jTable1.getValueAt(selectedRow, 3).toString();
        String moTa = jTable1.getValueAt(selectedRow, 4).toString();

        // Hiển thị cửa sổ hoặc hộp thoại sửa đổi thông tin
        JFrame frame = new JFrame("Sửa thông tin sản phẩm");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        JTextField tenSPField = new JTextField(tenSP, 20);
        JTextField giaField = new JTextField(gia, 10);
        JTextField moTaField = new JTextField(moTa, 20);
        JComboBox<String> danhMucComboBox = new JComboBox<>(new String[]{"Sản phẩm loại 1", "Sản phẩm loại 2"});
        danhMucComboBox.setSelectedItem(danhMuc);

        saveButton = new JButton("Lưu");
        saveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Lấy thông tin mới từ các trường nhập liệu
                String newTenSP = tenSPField.getText();
                String newDanhMuc = danhMucComboBox.getSelectedItem().toString();
                String newGia = giaField.getText();
                String newMoTa = moTaField.getText();
                float newGiaFloat = 0;
                try {
                    newGiaFloat = Float.parseFloat(newGia);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(frame, "Giá không hợp lệ.", "Thông báo", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                jTable1.setValueAt(newTenSP, selectedRow, 1);
                jTable1.setValueAt(newDanhMuc, selectedRow, 2);
                jTable1.setValueAt(newGia, selectedRow, 3);
                jTable1.setValueAt(newMoTa, selectedRow, 4);
                JOptionPane.showMessageDialog(frame, "Thông tin đã được lưu thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                frame.dispose();
            }
        });

        // Tạo panel và thêm các thành phần vào panel
        JPanel panel = new JPanel(new GridLayout(5, 2));
        panel.add(new JLabel("Tên sản phẩm:"));
        panel.add(tenSPField);
        panel.add(new JLabel("Danh mục:"));
        panel.add(danhMucComboBox);
        panel.add(new JLabel("Giá:"));
        panel.add(giaField);
        panel.add(new JLabel("Mô tả:"));
        panel.add(moTaField);
        panel.add(saveButton);


        // Thêm panel vào frame và hiển thị frame
        frame.getContentPane().add(panel);
        frame.pack();
        frame.setLocationRelativeTo(parentFrame);
        frame.setVisible(true);
    }

    public void timKiemSanPham(String ten, String danhMuc, String gia, String moTa) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        java.util.List<String> foundProducts = new ArrayList<>(); // Danh sách các sản phẩm tìm thấy
        for (int i = 0; i < model.getRowCount(); i++) {
            String tenSP = model.getValueAt(i, 1).toString();
            String danhMucSP = model.getValueAt(i, 2).toString();
            String giaSP = model.getValueAt(i, 3).toString();
            String moTaSP = model.getValueAt(i, 4).toString(); // Thêm trường "Mô Tả SP"
            if ((ten.isEmpty() || tenSP.equals(ten)) && (danhMuc.isEmpty() || danhMucSP.equals(danhMuc)) && (gia.isEmpty() || giaSP.equals(gia)) && (moTa.isEmpty() || moTaSP.equals(moTa))) {
                // Thêm sản phẩm vào danh sách tìm thấy
                foundProducts.add("Tên sản phẩm: " + tenSP + ", Danh mục: " + danhMucSP + ", Giá: " + giaSP + ", Mô tả: " + moTaSP);
            }
        }
        if (!foundProducts.isEmpty()) {
            // Hiển thị danh sách sản phẩm tìm thấy
            StringBuilder resultMessage = new StringBuilder("Các sản phẩm được tìm thấy:\n\n");
            for (int i = 0; i < foundProducts.size(); i++) {
                resultMessage.append(i + 1).append(". ").append(foundProducts.get(i)).append("\n");
            }
            JOptionPane.showMessageDialog(this, resultMessage.toString(), "Kết quả tìm kiếm", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Thông báo nếu không tìm thấy sản phẩm
            JOptionPane.showMessageDialog(this, "Sản phẩm không tồn tại.", "Kết quả tìm kiếm", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    public void buttonTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTimKiemActionPerformed
        // TODO add your handling code here:

        String ten = tenSP.getText();
        String danhMuc = danhMucSP.getSelectedItem().toString();
        String gia = giaSP.getText();
        String moTa = moTaSanPham.getText();

        // Gọi phương thức tìm kiếm
        timKiemSanPham(ten, danhMuc, gia, moTa);
    }//GEN-LAST:event_buttonTimKiemActionPerformed

    void buttonXoaActionPerformed(ActionEvent evt) {//GEN-FIRST:event_buttonXoaActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.removeRow(selectedRow);

            // Cập nhật lại số thứ tự
            for (int i = 0; i < model.getRowCount(); i++) {
                model.setValueAt(i + 1, i, 0); // Giả sử số thứ tự là cột đầu tiên (index 0)
            }
            stt = 1;
            for(int i = 0; i <model.getRowCount(); i++){
                model.setValueAt(stt++, i,0);
            }
            JOptionPane.showMessageDialog(this, "Đã xóa sản phẩm thành công!");
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm để xóa!");
        }
    }//GEN-LAST:event_buttonXoaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(QuanLyKho.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(QuanLyKho.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(QuanLyKho.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(QuanLyKho.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuanLyKho().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public JButton buttonSua;
    public JButton buttonThem;
    

    private JButton buttonTimKiem;
    private JButton buttonXoa;
    public JComboBox<String> danhMucSP;
    public JTextField giaSP;
    private JCheckBoxMenuItem jCheckBoxMenuItem1;
    private JInternalFrame jInternalFrame1;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JScrollPane jScrollPane1;
    private JSeparator jSeparator1;
    private JSeparator jSeparator2;
    private JSeparator jSeparator3;
    JTable jTable1;
    private List list1;
    public JTextField moTaSanPham;
    protected JTextField tenSP;
}
